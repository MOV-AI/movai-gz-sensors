name: Build and pack Ignition packages
on:
  workflow_call:
    inputs:
      deploy:
        required: false
        type: string
        default: 'false'
      release:
        required: false
        type: string
        default: 'false'

    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      auto_commit_pwd:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
      gh_token:
        required: true

jobs:
  Build:
    if: ${{ inputs.release == 'false' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Find Package details
      id: vars
      run: |
        CMAKE_LISTS="CMakeLists.txt"
        PACKAGE_NAME=$(grep -m 1 "project(" "$CMAKE_LISTS" | sed -n 's/project(\(.*\) VERSION \(.*\))/\1/p')
        PACKAGE_VERSION=$(grep -m 1 "project(" "$CMAKE_LISTS" | sed -n 's/project(\(.*\) VERSION \(.*\))/\2/p')
        echo "pkg_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        echo "pkg_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

    - name: Raise Version
      id: vars-after-raise
      run: |
        PACKAGE_VERSION=${{ steps.vars.outputs.pkg_version }}
        IFS='.' read major_version minor_version patch_version <<< "$PACKAGE_VERSION"
        main_version="$major_version.$minor_version"
        raised_patchversion=$(($patch_version+1))
        RAISED_PACKAGE_VERSION="$main_version.$raised_patchversion"
        echo "pkg_version=$RAISED_PACKAGE_VERSION" >> $GITHUB_OUTPUT
    
    - name: Update Version
      run: |
        NEW_VERSION=${{ steps.vars-after-raise.outputs.pkg_version }}
        PACKAGE_NAME=${{ steps.vars.outputs.pkg_name }}
        sed -i "s/\(project($PACKAGE_NAME VERSION \)[0-9.]*\()\)/\1$NEW_VERSION\2/" CMakeLists.txt

    - name: Compile, test and package
      id: ci
      uses: ignition-tooling/action-ignition-ci@focal
      with:
        cpplint-enabled: true

    - name: Archive debian artifact
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: artifacts/*
        retention-days: 5

    - name: Print generated packages
      run: ls -la artifacts

  Publish:
    if: ${{ inputs.deploy == 'true' }}
    runs-on: ubuntu-latest
    needs:  [Build]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download a single artifact
      uses: actions/download-artifact@v3
      with:
        name: packages
        path: artifacts

    - name: Print generated packages
      run: |
        ls -la artifacts

    - name: Publish to Nexus ppa-dev
      shell: bash
      run: |
          NEXUS_ENDPOINT="artifacts.aws.cloud.mov.ai"
          NEXUS_REPO="ppa-dev"

          for file in artifacts/*.deb
          do
            RETURN_CODE=$(curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
            -H "Content-Type: multipart/form-data" \
            --data-binary "@$file" \
            -w '%{http_code}' \
            "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/")

            #retry
            if [[ ! "$RETURN_CODE" =~ ^(200|201|202)$ ]]; then
              echo "Failed upload with $RETURN_CODE. Retrying"

              RETURN_CODE=$(curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
                -H "Content-Type: multipart/form-data" \
                --data-binary "@$file" \
                -w '%{http_code}' \
                "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/")
            fi

            if [[ ! "$RETURN_CODE" =~ ^(200|201|202)$ ]]; then
              echo "Failed upload with $RETURN_CODE. Exiting"
              exit 1
            fi

          done

    - name: Commit raise version
      id: raise
      run: |
        git config --global --add safe.directory $(pwd)
        git config --global user.name '${{ secrets.auto_commit_user }}'
        git config --global user.email '${{ secrets.auto_commit_mail }}'
        git config --global user.password ${{ secrets.auto_commit_pwd }}
        git pull
        git add CMakeLists.txt
        git commit -m "[skip actions] Automatic Bump of build version"

    - name: Prepare raise variables
      id: pre_raise
      run: |
        echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

    - name: Raise App version
      uses: CasperWA/push-protected@v2.14.0
      with:
        token: ${{ secrets.auto_commit_pwd }}
        branch: ${{ steps.pre_raise.outputs.branch }}
        unprotect_reviews: true

    - name: Commit info
      id: commit
      shell: bash
      run: |
        commit_hash=$(git log --format="%H" -n 1)
        echo "commit_id=$commit_hash" >> $GITHUB_OUTPUT
  
    - name: Create Github Release
      uses: softprops/action-gh-release@v1
      with:
        name: "Release of ${{ steps.vars-after-raise.outputs.pkg_version }}"
        body: "Please add release notes"
        tag_name: ${{ steps.vars-after-raise.outputs.pkg_version }}
        target_commitish: ${{ steps.commit.outputs.commit_id }}
        token: ${{ secrets.gh_token }}
        prerelease: true
        generate_release_notes: true
        files: artifacts/*.deb

  Release:
    if: ${{ inputs.release == 'true' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set tag output
      id: vars
      run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

    - name: Fetch artifact from github release
      run: |
        git config --global --add safe.directory $(pwd)
        mkdir artifacts
        cd artifacts
        gh release download ${{ steps.vars.outputs.tag}} -p *.deb
      env:
        GITHUB_TOKEN: ${{ secrets.gh_token }}

    - name: Publish to Nexus ppa-public
      run: |
          NEXUS_ENDPOINT="artifacts.aws.cloud.mov.ai"
          NEXUS_REPO="ppa-public"
          FILE_LOCATION=$(find artifacts/*.deb)
          find artifacts -type f -name '*.deb' -exec curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
          -H "Content-Type: multipart/form-data" \
          --data-binary "@{}" \
          "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/" \;